# -*- coding: utf-8 -*-
"""ProgramaBancoV1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bL2teVsVLXt47dsmVwpwH_dpGyj2E4qq
"""

import pandas as numpy
from datetime import datetime

saldo = 0.0
saqueMaximo = 500.0
saquePorDia = 3

data_atual = datetime.today().date()
data_formatada = data_atual.strftime("%d/%m/%Y")  # Formata como "dia/mês/ano"

transacao = (data_formatada, f"+{saldo:.2f}")

dataSaque = []

extrato = ()
extrato = (data_formatada, saldo)
print(extrato)  # Saída: 2025-04-02 (ou a data atual do sistema)

def acaoBanco(acao, saldo, extrato, saqueMaximo, dataSaque):
    if acao == "1":
        extratoFunc(saldo, extrato)
    elif acao == "2":
        saldo, extrato = deposito(saldo, extrato)
    elif acao == "3":
        saldo, extrato, dataSaque = saque(saldo, extrato, saqueMaximo, dataSaque)

    return saldo, extrato, dataSaque

def extratoFunc(saldo, extrato):
  print(f"Seu saldo é: R$ {saldo:.2f}")
  print("Extrato:")
  for transacao in extrato:
    print(transacao)

def deposito(saldo, extrato):
  try:
    deposito = float(input("Quanto você quer depositar\n"))
    if deposito > 0:
      saldo += deposito
      data_formatada = datetime.today().strftime("%d/%m/%Y")
      transacao = (data_formatada, f"+{deposito:.2f}")
      extrato += (transacao,)  # Adiciona a transação à tupla
      print("Depósito realizado com sucesso!")
    else:
      print("Valor inválido! O depósito deve ser maior que zero.")
      extratoAcao = None  # Para evitar erro no return
  except ValueError:
    print("Valor inválido! O depósito deve ser um número.")
    extratoAcao = None  # Para evitar erro no return

  return saldo, extrato

def testeValidadeSaque(saque, saldo, saqueMaximo, dataSaque):
    if (saldo - saque) < 0:
        print("Saldo insuficiente")
        return False
    elif saque > saqueMaximo:
        print(f"Valor inválido! O saque deve ser menor ou igual a {saqueMaximo}.")
        return False
    elif saque <= 0:
        print("Valor inválido! O saque deve ser maior que zero.")
        return False
    else:
        if len(dataSaque) < 3:
            return True  # Não tem elementos suficientes pra comparar
        else:
            print("Você já sacou 3 vezes hoje")
            return not (dataSaque[-1] == dataSaque[-2] == dataSaque[-3])

def saque(saldo, extrato, saqueMaximo, dataSaque):
  try:
    saque = float(input("Quanto você quer sacar?\n"))
    teste = testeValidadeSaque(saque, saldo, saqueMaximo, dataSaque)
    if teste == True:
      saldo -= saque
      data_formatada = datetime.today().strftime("%d/%m/%Y")
      transacao = (data_formatada, f"-{saque:.2f}")
      extrato += (transacao,)  # Adiciona a transação à tupla
      dataSaque.append(data_formatada)
      print("saque realizado com sucesso!")
    else:
      print("Saque não realizado")
      extratoAcao = None  # Para evitar erro no return
  except ValueError:
    print("Valor inválido! O depósito deve ser um número.")
    extratoAcao = None  # Para evitar erro no return

  return saldo, extrato, dataSaque

while True:
  acao = input("O que você goataria de fazer? \n1 - consultar extrato?\n2 - deposito?\n3 - saque?\n4 - Sair")
  if acao != "1" and acao != "2" and acao != "3" and acao != "4":
      print("Ação inválida")
  elif acao == "4":
      print("Obrigado por usar nossos serviços")
      break
  elif acao == "1" or acao == "2" or acao == "3":
      print(f"Valor escolhido foi '{acao}'")
      saldo, extrato, dataSaque = acaoBanco(acao, saldo, extrato, saqueMaximo, dataSaque)

